* Emacs Configuration For Joe DeCock
This is my emacs config. There are many like it but this one is mine.

The bulk of the emacs configuration lives in this org file, which
should be regarded as the source of truth for configuration - NOT
emacs.el. The actual configurations are contained in src blocks that
are extracted via org-babel-tangle into emacs.el. emacs.el is loaded
by a very minimal init.el. Apart from loaded the tangled file, the
only thing init.el should ever do is customization via the customize
interface, which needs a place to dump generated configurations. My
intention is to use customize as a way to quickly find and experiment
with settings, but to eventually either eliminate or move customized
settings here.

* Basics

#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'package)
  (add-to-list
   'package-archives (cons "melpa" "https://melpa.org/packages/") t)
  (package-initialize)

;;; Basic Visuals - Set Theme and Disable Bars
(load-theme 'zenburn t)
(menu-bar-mode -1)
(tool-bar-mode -1)

;;; Global Keybindings
(global-set-key (kbd "C-z") 'undo)
(global-set-key (kbd "C-x g") 'magit-status)

;; Tab Completion
(setq tab-always-indent 'complete)

;; Indentation
(setq-default indent-tabs-mode nil)


;; Wrapping and Filling
; (setq fill-column 80)
(require 'fill-column-indicator)
(fci-mode 1)
 

;;; Tide (It's an ad ;) )
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save idle-change new-line mode-enabled))
  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`x
  (company-mode +1))

(setq company-tooltip-align-annotations t) ;; aligns annotation to the right
                                           ;; hand side

(add-hook 'typescript-mode-hook #'setup-tide-mode)


;;; Projectile
(projectile-mode 1)
(counsel-projectile-mode 1)

;;; Completion
(ivy-mode 1) ; Use ivy for completion
(counsel-mode 1) ; Use ivy aware versions common commands
(setq ivy-use-virtual-buffers t) ; Include recent files in buffer
                                 ; switch
(setq ivy-re-builders-alist  
      '((t . ivy--regex-fuzzy)))

(setq ivy-initial-inputs-alist nil)   ; Fuzzy completion doesn't need any
                                      ; initial input
(require 'flx)                        ; Load flx to sort fuzzy matches


;; Spaces are usually not the right thing in a completion. Dashes usually are
(define-key ivy-minibuffer-map " " '(lambda () (interactive) (insert "-")))

;; But some files have spaces in them, and it would be really annoying
;; if I couldn't get to them with C-x C-f.
(define-key counsel-find-file-map " " 'self-insert-command)

;;; Wrap ISearch
(defadvice isearch-repeat (after isearch-no-fail activate)
  (unless isearch-success
    (ad-disable-advice 'isearch-repeat 'after 'isearch-no-fail)
    (ad-activate 'isearch-repeat)
    (isearch-repeat (if isearch-forward 'forward))
    (ad-enable-advice 'isearch-repeat 'after 'isearch-no-fail)
    (ad-activate 'isearch-repeat)))

;;; Html
(add-hook
 'sgml-mode-hook
 (lambda ()
   ;; Default indentation to 2, but let SGML mode guess, too.
   (set (make-local-variable 'sgml-basic-offset) 2)
   (sgml-guess-indent)))


;;; Magit
;; Can I get magit to watch the directory?

;;; YASnippet
(require 'yasnippet)
(yas-global-mode)
(require 'ivy-yasnippet)
;; BUG 'ivy-yasnippet inserts the expanded text into the buffer if you
;; navigate through the list too much.
;;
;; 'ivy-yasnippet just doesn't do what I want. It lets you explore the
;; snippets, and it starts out with the current expansion, but it
;; doesn't use the current expanision as the initial search



(defun px-actions-prefix-from-file-name (file-name)
  (capitalize
   (replace-regexp-in-string
    "[_-]" " "
    (file-name-sans-extension           ; Remove the .actions part of the filename
     (file-name-base file-name)))))

(defun upcase-with-underscores (string)
  (replace-regexp-in-string "[ -]" "_" (upcase string)))

(defun upper-camel-case (string)
  (replace-regexp-in-string "[ _-]" "" (upcase-initials string)))


;; Org Mode

(setq org-hide-emphasis-markers t)
(setq org-hidden-keywords '(title email))

(setq org-hidden-keywords nil)

;;;;;;;;; init.el TODOS ;;;;;;;;;
;; Use org mode for .emacs?
;; Use org mode for taking notes - scratch notes unsaved don't prevent closing emacs!
;; Back and forward like in vs code
;; Fill column of 80, except in my project it is 140
;; Directory explorer with nice icons
;; mode line improvements (the line noise at the beginning is gross)
;; Ctrl-Backspace with lots of whitespace should delete just whitespace
;; Use highlight changes mode, customize the faces so that you have
;; background not foreground colors, and automatically rotate faces on
;; save hook.
;; Can I have highlight changes only highlight the fringe, or maybe do something subtle in the background?
;; Highlight changes next and previous changes need keybidings

;;;;;;;;; emacs learning ;;;;;;;;;
;; projectile mode
;; magit
;; Try C-M-i in .ts file with tide

#+END_SRC
